{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hardeep Singh\\\\Desktop\\\\E-Commerce\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check localStorage for saved preference, default to false\n    const saved = localStorage.getItem('darkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const toggleDarkMode = () => {\n    setIsDarkMode(prev => !prev);\n  };\n\n  // Apply body classes for global dark mode\n  useEffect(() => {\n    if (isDarkMode) {\n      document.body.classList.add('dark-mode');\n      document.body.classList.remove('light-mode');\n    } else {\n      document.body.classList.add('light-mode');\n      document.body.classList.remove('dark-mode');\n    }\n  }, [isDarkMode]);\n\n  // Save preference to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n\n  // Define theme colors\n  const theme = {\n    colors: {\n      primary: '#ff6b35',\n      primaryDark: '#e64a19',\n      secondary: '#ff8a65',\n      background: isDarkMode ? '#1a1a1a' : '#ffffff',\n      surface: isDarkMode ? '#2d2d2d' : '#ffffff',\n      text: isDarkMode ? '#ffffff' : '#1a1a1a',\n      textSecondary: isDarkMode ? '#bdbdbd' : '#616161',\n      border: isDarkMode ? '#424242' : '#e0e0e0',\n      accent: isDarkMode ? '#ff8a65' : '#ff6b35'\n    },\n    shadows: {\n      sm: isDarkMode ? '0 1px 2px 0 rgba(255, 255, 255, 0.05)' : '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n      md: isDarkMode ? '0 4px 6px -1px rgba(255, 255, 255, 0.1)' : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n      lg: isDarkMode ? '0 10px 15px -3px rgba(255, 255, 255, 0.1)' : '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\n      xl: isDarkMode ? '0 20px 25px -5px rgba(255, 255, 255, 0.1)' : '0 20px 25px -5px rgba(0, 0, 0, 0.1)'\n    }\n  };\n  const value = {\n    isDarkMode,\n    toggleDarkMode,\n    theme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"okVC19GaoPwT7lJla417p1YB8x8=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","toggleDarkMode","prev","document","body","classList","add","remove","setItem","stringify","theme","colors","primary","primaryDark","secondary","background","surface","text","textSecondary","border","accent","shadows","sm","md","lg","xl","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Hardeep Singh/Desktop/E-Commerce/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    // Check localStorage for saved preference, default to false\r\n    const saved = localStorage.getItem('darkMode');\r\n    return saved ? JSON.parse(saved) : false;\r\n  });\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(prev => !prev);\r\n  };\r\n\r\n  // Apply body classes for global dark mode\r\n  useEffect(() => {\r\n    if (isDarkMode) {\r\n      document.body.classList.add('dark-mode');\r\n      document.body.classList.remove('light-mode');\r\n    } else {\r\n      document.body.classList.add('light-mode');\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  // Save preference to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\r\n  }, [isDarkMode]);\r\n\r\n  // Define theme colors\r\n  const theme = {\r\n    colors: {\r\n      primary: '#ff6b35',\r\n      primaryDark: '#e64a19',\r\n      secondary: '#ff8a65',\r\n      background: isDarkMode ? '#1a1a1a' : '#ffffff',\r\n      surface: isDarkMode ? '#2d2d2d' : '#ffffff',\r\n      text: isDarkMode ? '#ffffff' : '#1a1a1a',\r\n      textSecondary: isDarkMode ? '#bdbdbd' : '#616161',\r\n      border: isDarkMode ? '#424242' : '#e0e0e0',\r\n      accent: isDarkMode ? '#ff8a65' : '#ff6b35',\r\n    },\r\n    shadows: {\r\n      sm: isDarkMode ? '0 1px 2px 0 rgba(255, 255, 255, 0.05)' : '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\r\n      md: isDarkMode ? '0 4px 6px -1px rgba(255, 255, 255, 0.1)' : '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\r\n      lg: isDarkMode ? '0 10px 15px -3px rgba(255, 255, 255, 0.1)' : '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\r\n      xl: isDarkMode ? '0 20px 25px -5px rgba(255, 255, 255, 0.1)' : '0 20px 25px -5px rgba(0, 0, 0, 0.1)',\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isDarkMode,\r\n    toggleDarkMode,\r\n    theme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}